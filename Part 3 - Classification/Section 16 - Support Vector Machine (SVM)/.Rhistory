xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("C:/Users/suresh/Desktop/Machine Learning A-Z/Part 3 - Classification/Section 15 - K-Nearest Neighbors (K-NN)")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
View(test_set)
View(training_set)
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2] = scale(test_set[,1:2])
library(class)
#fitting knn to our trainingset and predicting the test_set results
library(class)
y_pred = knn(train = training_set, test = test_set, cl = training_set[, 3],
k = 5)
y_pred
cm = table(test_set[,3],y_pred)
cm
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# factoring the dataset
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2] = scale(test_set[,1:2])
#fitting knn to our trainingset and predicting the test_set results
library(class)
y_pred = knn(train = training_set, test = test_set, cl = training_set[, 3],
k = 5)
#predicting test set results
prob_pred = predict(classifier,type = 'response', newdata = test_set[-3])
y_pred = ifelse(prob_pred > 0.5,1,0)
#building confusion matrix or evaluating
cm = table(test_set[,3],y_pred)
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# factoring the dataset
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2] = scale(test_set[,1:2])
#fitting knn to our trainingset and predicting the test_set results
library(class)
y_pred = knn(train = training_set, test = test_set, cl = training_set[, 3],
k = 5)
#building confusion matrix or evaluating
cm = table(test_set[,3],y_pred)
cm
View(dataset)
View(training_set)
View(test_set)
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# factoring the dataset
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,-3] = scale(training_set[,-3])
test_set[,-3] = scale(test_set[,-3])
#fitting knn to our trainingset and predicting the test_set results
library(class)
y_pred = knn(train = training_set, test = test_set, cl = training_set[, 3],
k = 5)
#building confusion matrix or evaluating
cm = table(test_set[,3],y_pred)
cm
#visualising the training_set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set, test = grid_set, cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = 'knn (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# factoring the dataset
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,-3] = scale(training_set[,-3])
test_set[,-3] = scale(test_set[,-3])
#fitting knn to our trainingset and predicting the test_set results
library(class)
y_pred = knn(train = training_set, test = test_set, cl = training_set[, 3],
k = 5)
#building confusion matrix or evaluating
cm = table(test_set[,3],y_pred)
#visualising the training_set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set, test = grid_set, cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = 'knn (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
#visualising the test_set results
set = test_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set, test = grid_set, cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = 'knn (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
#visualising the training_set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set, test = grid_set, cl = training_set[, 3],
k = 5)
plot(set[, -3],
main = 'knn (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
y_grid = knn(train = training_set, test = grid_set, cl = training_set[, 3], k = 5)
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# factoring the dataset
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,-3] = scale(training_set[,-3])
test_set[,-3] = scale(test_set[,-3])
#fitting knn to our trainingset and predicting the test_set results
library(class)
y_pred = knn(train = training_set[, -3], test = test_set[, -3], cl = training_set[, 3],
k = 5)
#building confusion matrix or evaluating
cm = table(test_set[,3],y_pred)
#visualising the training_set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'knn (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
#visualising the test_set results
set = test_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'knn (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
#visualising the training_set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'knn (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# factoring the dataset
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.25)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,-3] = scale(training_set[,-3])
test_set[,-3] = scale(test_set[,-3])
#fitting knn to our trainingset and predicting the test_set results
library(class)
y_pred = knn(train = training_set[, -3], test = test_set[, -3], cl = training_set[, 3],
k = 5)
#building confusion matrix or evaluating
cm = table(test_set[,3],y_pred)
#visualising the training_set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'knn (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
#visualising the test_set results
set = test_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'knn (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
#visualising the training_set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'knn (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
#visualising the training_set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'knn (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
#visualising the test_set results
set = test_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'knn (test set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# factoring the dataset
dataset$Purchased = factor(dataset$Purchased, levels = c(0,1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,-3] = scale(training_set[,-3])
test_set[,-3] = scale(test_set[,-3])
#fitting knn to our trainingset and predicting the test_set results
library(class)
y_pred = knn(train = training_set[, -3], test = test_set[, -3], cl = training_set[, 3],
k = 5)
#building confusion matrix or evaluating
cm = table(test_set[,3],y_pred)
#visualising the training_set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'knn (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
#visualising the test_set results
set = test_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = knn(train = training_set[, -3], test = grid_set, cl = training_set[, 3], k = 5)
plot(set[, -3],
main = 'knn (test set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
setwd("C:/Users/suresh/Desktop/Machine Learning A-Z/Part 3 - Classification/Section 16 - Support Vector Machine (SVM)")
# Importing the dataset
dataset = read.csv('Social_Network_Ads.csv')
dataset = dataset[, 3:5]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,1:2] = scale(training_set[,1:2])
test_set[,1:2] = scale(test_set[,1:2])
library(e1071)
classifier = svm(formula = Purchased ~ ., data = training_set, type = 'C-classification', kernel = 'linear')
View(dataset)
View(training_set)
y_pred = predict(classifier, newdata = test_set)
y_pred
View(test_set)
View(test_set)
cm = table(test_set[,3],y_pred)
cm
#visualising the training_set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier,type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'svm (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
#visualising the training_set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
x1 = seq(min(set[,1]) -1, max(set[,1]) +1, by = 0.01)
x2 = seq(min(set[,2]) -1, max(set[,2]) +1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'svm (training set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
#visualising the test_set results
set = test_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier,type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'svm (test set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
#visualising the test_set results
set = test_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
prob_set = predict(classifier,type = 'response', newdata = grid_set)
y_grid = ifelse(prob_set > 0.5, 1, 0)
plot(set[, -3],
main = 'svm (test set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
#visualising the test_set results
set = test_set
x1 = seq(min(set[,1])-1, max(set[,1])+1, by = 0.01)
x2 = seq(min(set[,2])-1, max(set[,2])+1, by = 0.01)
grid_set = expand.grid(x1,x2)
colnames(grid_set) = c('Age', 'EstimatedSalary')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'svm (test set)',
xlab = 'Age' ,ylab = 'EstimatedSalary',
xlim = range(x1), ylim = range(x2))
contour(x1,x2, matrix(as.numeric(y_grid), length(x1), length(x2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 1, 'springgreen3', 'tomato'))
points(set, pch = 19, col = ifelse(set[, 3] == 1, 'green4', 'red3'))
cm
